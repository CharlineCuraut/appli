{"ast":null,"code":"var _jsxFileName = \"/Users/charlinecuraut/Documents/VSCode/webL3/appli/client/src/context/ProvideCombinedContext.js\";\nimport React from \"react\";\nimport { ThemeContext } from \"./theme_context\";\nimport { IdContext } from \"./id_context\";\nimport { ContextCombinedThemeAndId } from \"./combined_context\"; // This is a reusable piece that could be used by any component that requires both contexts.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProvideCombinedContext = props => {\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Consumer, {\n    children: contextTheme => /*#__PURE__*/_jsxDEV(IdContext.Consumer, {\n      children: contextId => /*#__PURE__*/_jsxDEV(ContextCombinedThemeAndId.Provider, {\n        value: {\n          contextTheme,\n          contextId\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ProvideCombinedContext;\nexport default ProvideCombinedContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProvideCombinedContext\");","map":{"version":3,"sources":["/Users/charlinecuraut/Documents/VSCode/webL3/appli/client/src/context/ProvideCombinedContext.js"],"names":["React","ThemeContext","IdContext","ContextCombinedThemeAndId","ProvideCombinedContext","props","contextTheme","contextId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,yBAAT,QAA0C,oBAA1C,C,CAEA;;;;AACA,MAAMC,sBAAsB,GAAGC,KAAK,IAAI;AACtC,sBACE,QAAC,YAAD,CAAc,QAAd;AAAA,cACIC,YAAD,iBACC,QAAC,SAAD,CAAW,QAAX;AAAA,gBACGC,SAAS,iBACR,QAAC,yBAAD,CAA2B,QAA3B;AAAoC,QAAA,KAAK,EAAE;AAAED,UAAAA,YAAF;AAAgBC,UAAAA;AAAhB;AAA3C;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAdD;;KAAMH,sB;AAeN,eAAeA,sBAAf","sourcesContent":["import React from \"react\";\nimport { ThemeContext } from \"./theme_context\";\nimport { IdContext } from \"./id_context\";\nimport { ContextCombinedThemeAndId } from \"./combined_context\";\n\n// This is a reusable piece that could be used by any component that requires both contexts.\nconst ProvideCombinedContext = props => {\n  return (\n    <ThemeContext.Consumer>\n      {(contextTheme) => (\n        <IdContext.Consumer>\n          {contextId => (\n            <ContextCombinedThemeAndId.Provider value={{ contextTheme, contextId }}>\n              {/* {props.children} */}\n            </ContextCombinedThemeAndId.Provider>\n          )}\n        </IdContext.Consumer>\n      )}\n    </ThemeContext.Consumer>\n  );\n};\nexport default ProvideCombinedContext;"]},"metadata":{},"sourceType":"module"}